import { uploadImage, uploadImageFromUrl, deleteImage, getOptimizedUrl, isValidImageType, isValidFileSize } from '../lib/cloudinary.js';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function verifyCloudinarySetup() {
  console.log('üîç Verifying Cloudinary Setup...\n');
  
  let uploadedPublicId: string | null = null;
  
  try {
    // Test 1: Environment variables
    console.log('1Ô∏è‚É£ Checking environment variables...');
    const requiredVars = ['CLOUDINARY_CLOUD_NAME', 'CLOUDINARY_API_KEY', 'CLOUDINARY_API_SECRET'];
    const missingVars = requiredVars.filter(v => !process.env[v]);
    
    if (missingVars.length > 0) {
      throw new Error(`Missing environment variables: ${missingVars.join(', ')}`);
    }
    console.log('‚úÖ All required environment variables are set\n');
    
    // Test 2: Validation functions
    console.log('2Ô∏è‚É£ Testing validation functions...');
    console.log(`   isValidImageType('test.jpg'): ${isValidImageType('test.jpg')}`);
    console.log(`   isValidImageType('test.pdf'): ${isValidImageType('test.pdf')}`);
    console.log(`   isValidFileSize(5 * 1024 * 1024): ${isValidFileSize(5 * 1024 * 1024)}`);
    console.log(`   isValidFileSize(15 * 1024 * 1024): ${isValidFileSize(15 * 1024 * 1024)}`);
    console.log('‚úÖ Validation functions working correctly\n');
    
    // Test 3: Create a test image
    console.log('3Ô∏è‚É£ Creating test image...');
    const testImagePath = path.join(__dirname, 'test-image.jpg');
    
    // Create a simple 1x1 pixel JPEG
    const jpegData = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x00, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
      0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
      0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
      0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00,
      0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03,
      0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D,
      0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
      0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08,
      0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72,
      0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28,
      0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45,
      0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
      0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75,
      0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
      0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3,
      0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6,
      0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9,
      0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2,
      0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4,
      0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01,
      0x00, 0x00, 0x3F, 0x00, 0xFB, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF,
      0xD9
    ]);
    
    fs.writeFileSync(testImagePath, jpegData);
    console.log('‚úÖ Test image created\n');
    
    // Test 4: Upload image
    console.log('4Ô∏è‚É£ Testing image upload...');
    const dataUrl = `data:image/jpeg;base64,${jpegData.toString('base64')}`;
    const uploadResult = await uploadImage(dataUrl, {
      folder: 'goldiegrace/test',
      public_id: `test_${Date.now()}`
    });
    
    uploadedPublicId = uploadResult.public_id;
    console.log('‚úÖ Image uploaded successfully:');
    console.log(`   Public ID: ${uploadResult.public_id}`);
    console.log(`   URL: ${uploadResult.secure_url}`);
    console.log(`   Size: ${uploadResult.width}x${uploadResult.height}\n`);
    
    // Test 5: Generate URL
    console.log('5Ô∏è‚É£ Testing URL generation...');
    const generatedUrl = getOptimizedUrl(uploadResult.public_id, {
      width: 200,
      height: 200,
      crop: 'fill'
    });
    console.log(`‚úÖ Generated URL: ${generatedUrl}\n`);
    
    // Test 6: Upload from URL
    console.log('6Ô∏è‚É£ Testing upload from URL...');
    const urlUploadResult = await uploadImageFromUrl(
      'https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?w=400',
      {
        folder: 'goldiegrace/test',
        public_id: `test_url_${Date.now()}`
      }
    );
    console.log('‚úÖ Image uploaded from URL successfully:');
    console.log(`   Public ID: ${urlUploadResult.public_id}\n`);
    
    // Test 7: Delete images
    console.log('7Ô∏è‚É£ Testing image deletion...');
    const deleteResult1 = await deleteImage(uploadResult.public_id);
    const deleteResult2 = await deleteImage(urlUploadResult.public_id);
    console.log(`‚úÖ Images deleted: ${deleteResult1 && deleteResult2}\n`);
    
    // Cleanup
    fs.unlinkSync(testImagePath);
    
    console.log('‚ú® All Cloudinary tests passed successfully!');
    console.log('üöÄ Your Cloudinary setup is working perfectly.\n');
    
  } catch (error) {
    console.error('\n‚ùå Cloudinary verification failed:');
    console.error(error);
    
    // Cleanup on error
    if (uploadedPublicId) {
      try {
        await deleteImage(uploadedPublicId);
      } catch (e) {
        // Ignore cleanup errors
      }
    }
    
    process.exit(1);
  }
}

// Run verification
verifyCloudinarySetup();